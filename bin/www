#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('lodos-web-applicationx:server');
var http = require('http');
let models = require('../models')

var mqtt = require('mqtt');
const uuid = require('uuid');


const {
  settings
} = require('../app');



/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

return models.sequelize.sync().then(result => {
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}





/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);


  //MQTT Server Connection
  var options = {
    port: process.env.port,
    host: process.env.host,
    clientId: process.env.clientId,
    username: process.env.username,
    password: process.env.password,
    keepalive: 60,
    rejectUnauthorized: true
  };

  var client = mqtt.connect(process.env.host, options);
  client.on('connect', function () {
    console.log('connected to broker');
    let datas = []
    let array = []

    setInterval(function () {
      let vehicles = [];
      if (datas.length != 0) {
       /*  console.log("data insterting") */
        models.Vehicle.findAll({
          raw: true,
          attributes: ['macAddress']
        }).then(result => {
          let veh= []

          result.forEach( res => {
            vehicles.push(Object.values(res)[0])
          });

          datas.forEach(function (data) {
            if (vehicles.includes(data.macAddress)) {
              array.push({
                'macAddress': data.macAddress,
                'dataName': 'gps',
                'data': data.gps,
                'time': data.time
              }, {
                'macAddress': data.macAddress,
                'dataName': 'hiz',
                'data': data.hiz,
                'time': data.time
              }, {
                'macAddress': data.macAddress,
                'dataName': 'sarj',
                'data': data.sarj,
                'time': data.time
              }, {
                'macAddress': data.macAddress,
                'dataName': 'sicaklik',
                'data': data.sicaklik,
                'time': data.time
              }, {
                'macAddress': data.macAddress,
                'dataName': 'akim',
                'data': data.akim,
                'time': data.time
              });
            } else {
              console.log("Error: Unregistered vehicle data. MAC: " + data.macAddress + " Time: " + data.time)
            }
          });
          models.Data.bulkCreate(array).then(function () {
            datas.length = 0;
            array.length = 0;
          }).catch(err => {
            console.log("error => " + err);
          })
        });
      } /* else {
        console.log("empty datas");
      } */
    }, 30000);

    client.subscribe('#', function () {
      // when a message arrives, do something with it
      client.on('message', function (topic, message, packet) {
        try {
          let incoming_object = JSON.parse(message.toString());
          datas.push(incoming_object);
          //console.log(incoming_object);
        } catch (e) {
          console.log('Error parsing JSON message: ' + e);
        }
      });
    });
  });

  client.on('error', function (err) {
    console.log(err);
  });
}